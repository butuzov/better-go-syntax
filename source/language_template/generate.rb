require_relative '../../../directory'
require_relative PathFor[:repo_helper]
require_relative PathFor[:textmate_tools]
require_relative PathFor[:sharedPattern]["numeric"]
require_relative './tokens.rb'

# 
# Setup grammar
# 
    Dir.chdir __dir__
    original_grammar = JSON.parse(IO.read("original.tmlanguage.json"))
    Grammar.convertSpecificIncludes(json_grammar: original_grammar, convert:["$self", "$base"], into: :$initial_context)
    grammar = Grammar.new(
        name: original_grammar["name"],
        scope_name: original_grammar["scopeName"],
        file_types: [
            "language extensions"
        ],
        version: "",
        information_for_contributors: [
            "This code was auto generated by a much-more-readble ruby file",
            "see https://github.com/jeff-hykin/cpp-textmate-grammar/blob/master",
        ],
    )
    # copy over all the repos
    for each_key, each_value in original_grammar["repository"] || []
        grammar[each_key.to_sym] = each_value
    end

#
#
# Contexts
#
#
    grammar[:$initial_context] = [
            # import all the original patterns
            *original_grammar["patterns"],
        ]
#
#
# Patterns
#
#
    grammar[:example_pattern_1] = Pattern.new(
        match: /put some regex here/,
        tag_as: "what.ever.that.regex.highlights",
    ),
    grammar[:example_pattern_2] = Pattern.new(
        Pattern.new(
            match: /hi/.or(/hello/),
            tag_as: "greeting",
        ).then(
            match: /\w+/,
            tag_as: "name"
        )
    ),
    grammar[:comment_example] = PatternRange.new(
        tag_as: "comment.block",
        start_pattern: Pattern.new(
            match: /\/\*/,
            tag_as: 'punctuation.definition.comment'
        ),
        end_pattern: Pattern.new(
            match: /\*\//,
            tag_as: 'punctuation.definition.comment'
        ),
    )
 
# Save
saveGrammar(grammar)